<h1>Dashboard</h1>

<div class="dashboard-wrapper">
	<div class="dashboard-section">
		<div class="dashboard-chart-wrapper">
			<canvas id="chtProject" width="600" height="400"></canvas>
		</div>
		<div class="dashboard-grid-wrapper">
			
		</div>
	</div>
	<div class="dashboard-section">
		<div class="dashboard-chart-wrapper">
			<canvas id="chtPeople" width="600" height="400"></canvas>
		</div>
		<div class="dashboard-grid-wrapper">
			
		</div>
	</div>
</div>

<script type="text/javascript">
	var data = {
		labels: ["January", "February", "March", "April", "May", "June", "July"],
		datasets: [
			{
				label: "My First dataset",
				fillColor: "rgba(220,220,220,0.2)",
				strokeColor: "rgba(220,220,220,1)",
				pointColor: "rgba(220,220,220,1)",
				pointStrokeColor: "#000",
				pointHighlightFill: "#333",
				pointHighlightStroke: "rgba(220,220,220,1)",
				data: [65, 59, 80, 81, 56, 55, 40]
			},
			{
				label: "My Second dataset",
				fillColor: "rgba(151,187,205,0.2)",
				strokeColor: "rgba(151,187,205,1)",
				pointColor: "rgba(151,187,205,1)",
				pointStrokeColor: "#111",
				pointHighlightFill: "#666",
				pointHighlightStroke: "rgba(151,187,205,1)",
				data: [28, 48, 40, 19, 86, 27, 90]
			}
		]
	};
	
	var data2 = {
		labels: ["January", "February", "March", "April", "May", "June", "July"],
		datasets: [
			{
				label: "My First dataset",
				fillColor: "rgba(220,220,220,0.5)",
				strokeColor: "rgba(220,220,220,0.8)",
				highlightFill: "rgba(220,220,220,0.75)",
				highlightStroke: "rgba(220,220,220,1)",
				data: [65, 59, 80, 81, 56, 55, 40]
			},
			{
				label: "My Second dataset",
				fillColor: "rgba(151,187,205,0.5)",
				strokeColor: "rgba(151,187,205,0.8)",
				highlightFill: "rgba(151,187,205,0.75)",
				highlightStroke: "rgba(151,187,205,1)",
				data: [28, 48, 40, 19, 86, 27, 90]
			}
		]
	};

	function BuildProjectChart(data) {
		// Get the context of the canvas element we want to select
		var ctx = document.getElementById("chtProject").getContext("2d");
		var newChart = new Chart(ctx).Line(data);			
	}
	
	function BuildPeopleChart(data) {
		// Get the context of the canvas element we want to select
		var ctx = document.getElementById("chtPeople").getContext("2d");
		var newChart = new Chart(ctx).Bar(data);			
	}
	
	BuildProjectChart(data);
	BuildPeopleChart(data2);
	
	Chart.defaults.global = {
		// Boolean - Whether to animate the chart
		animation: true,			
		// Number - Number of animation steps
		animationSteps: 60,			
		// String - Animation easing effect
		animationEasing: "easeOutQuart",			
		// Boolean - If we should show the scale at all
		showScale: true,			
		// Boolean - If we want to override with a hard coded scale
		scaleOverride: false,			
		// ** Required if scaleOverride is true **
		// Number - The number of steps in a hard coded scale
		scaleSteps: null,
		// Number - The value jump in the hard coded scale
		scaleStepWidth: null,
		// Number - The scale starting value
		scaleStartValue: null,			
		// String - Colour of the scale line
		scaleLineColor: "rgba(0,0,0,.1)",			
		// Number - Pixel width of the scale line
		scaleLineWidth: 1,			
		// Boolean - Whether to show labels on the scale
		scaleShowLabels: true,			
		// Interpolated JS string - can access value
		//scaleLabel: "<%=value%>",			
		// Boolean - Whether the scale should stick to integers, not floats even if drawing space is there
		scaleIntegersOnly: true,			
		// Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
		scaleBeginAtZero: false,	
		// String - Scale label font declaration for the scale label
		scaleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",			
		// Number - Scale label font size in pixels
		scaleFontSize: 12,			
		// String - Scale label font weight style
		scaleFontStyle: "normal",			
		// String - Scale label font colour
		scaleFontColor: "#666",			
		// Boolean - whether or not the chart should be responsive and resize when the browser does.
		responsive: true,			
		// Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
		maintainAspectRatio: true,			
		// Boolean - Determines whether to draw tooltips on the canvas or not
		showTooltips: true,			
		// Function - Determines whether to execute the customTooltips function instead of drawing the built in tooltips (See [Advanced - External Tooltips](#advanced-usage-custom-tooltips))
		customTooltips: false,			
		// Array - Array of string names to attach tooltip events
		tooltipEvents: ["mousemove", "touchstart", "touchmove"],			
		// String - Tooltip background colour
		tooltipFillColor: "rgba(0,0,0,0.8)",			
		// String - Tooltip label font declaration for the scale label
		tooltipFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",			
		// Number - Tooltip label font size in pixels
		tooltipFontSize: 14,			
		// String - Tooltip font weight style
		tooltipFontStyle: "normal",			
		// String - Tooltip label font colour
		tooltipFontColor: "#fff",			
		// String - Tooltip title font declaration for the scale label
		tooltipTitleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",			
		// Number - Tooltip title font size in pixels
		tooltipTitleFontSize: 14,			
		// String - Tooltip title font weight style
		tooltipTitleFontStyle: "bold",			
		// String - Tooltip title font colour
		tooltipTitleFontColor: "#fff",			
		// Number - pixel width of padding around tooltip text
		tooltipYPadding: 6,			
		// Number - pixel width of padding around tooltip text
		tooltipXPadding: 6,			
		// Number - Size of the caret on the tooltip
		tooltipCaretSize: 8,			
		// Number - Pixel radius of the tooltip border
		tooltipCornerRadius: 6,			
		// Number - Pixel offset from point x to tooltip edge
		tooltipXOffset: 10,			
		// String - Template string for single tooltips
		//tooltipTemplate: "<%if (label){%><%=label%>: <%}%><%= value %>",			
		// String - Template string for single tooltips
		//multiTooltipTemplate: "<%= value %>",			
		// Function - Will fire on animation progression.
		onAnimationProgress: function(){},			
		// Function - Will fire on animation completion.
		onAnimationComplete: function(){}
	}
</script>